"""Assign Green View score to point features"""

from pathlib import Path
import sys

import geopandas as gpd
from loguru import logger as log
import pandas as pd
from tqdm.contrib.concurrent import thread_map
from typer import Argument, Option, Typer

from src.scoring.green_view import PixelCounting
from src.scoring.scoring_method import ScoringSelector
from src.scoring.segmentation import Segmentation

try:
    from typing import Annotated, List
except ImportError:
    # for Python 3.9
    from typing_extensions import Annotated, List


app = Typer()


@app.command()
def main(
    images_file: Annotated[
        Path,
        Argument(help="Path to interim points and images file"),
    ],
    index_scorers: Annotated[
        List[ScoringSelector],
        Argument(help="Path to point features file generated by create_points."),
    ],
    output_file: Annotated[
        Path,
        Argument(
            help="File to write output data to (can specify any GDAL-supported format)."
        ),
    ],
    verbose: Annotated[bool, Option(help="Sets log level to DEBUG")] = False,
) -> Path:
    """Calculate Green View Index (GVI) scores for a dataset of street-level images.

    Args:
            images_file: GPKG file containing points and images
            index_scorers: list of scoring methods to apply
            output_file: file to save GeoPackage output to (provide full path)
            verbose: sets log level to DEBUG

    Returns:
            File containing point locations with associated Green View score

    """

    log.remove()
    if verbose:
        log.add(sys.stdout, level="DEBUG")
    else:
        log.add(sys.stdout, level="INFO")

    scoring_methods = set()

    if ScoringSelector.pixel_counting in index_scorers:
        scoring_methods.add(PixelCounting())
    elif ScoringSelector.segmentation in index_scorers:
        scoring_methods.add(Segmentation())

    gdf = gpd.read_file(images_file)

    for method in scoring_methods:
        gdf[method.score_name] = pd.Series()

    # Loop through each image in the Mapillary folder and get the GVI score
    def score_image(row: int):
        image_path = gdf.at[row, "image_path"]
        if image_path != "None":
            log.debug(image_path)
            for scoring_method in scoring_methods:
                gdf.at[row, scoring_method.score_name] = scoring_method.get_score(
                    image_path
                )

    thread_map(
        score_image,
        gdf.index,
        total=len(gdf.index),
        desc="Calculating GVI of Images/Points",
        unit="images",
    )

    log.info(gdf.columns)
    log.info(gdf)

    # Export as GPKG
    output_file = output_file.resolve()
    gdf.to_file(output_file)
    log.success("Saved points, images and scores to {}", output_file)
    return output_file


if __name__ == "__main__":
    app()
